{"version":3,"file":"pagetransitions.modern.js","sources":["../src/enums.ts","../src/store.ts","../src/context.ts","../src/usePageTransition.tsx","../src/utils.ts","../src/PageWrapper.tsx","../src/PageTransitions.tsx"],"sourcesContent":["export const enum TransitionState {\n  SUSPENDED = \"suspended\", // waiting to mount or suspended\n  APPEAR = \"appear\",\n  APPEARING = \"appearing\",\n  APPEARED = \"appeared\",\n  EXIT = \"exit\",\n  EXITING = \"exiting\",\n  EXITED = \"exited\",\n  ENTER = \"enter\",\n  ENTERING = \"entering\",\n  ENTERED = \"entered\",\n}\n","import create from \"zustand/vanilla\";\nimport createHook from \"zustand\";\n\nimport { TransitionState } from \"./enums\";\n\nexport type TransitionConfig = {\n  from?: string;\n  to?: string;\n  data?: any;\n};\n\ntype Store = {\n  transitionStateTo: TransitionState;\n  transitionStateFrom: TransitionState;\n  transitionConfig: TransitionConfig | null;\n  exitDone: () => void;\n  enterDone: () => void;\n  from: string | null;\n  to: string | null;\n  data: any;\n  onEnteringCount: number;\n  onExitingCount: number;\n  applyTransitionConfig: () => void;\n  suspendedRoute: string | null;\n};\n\nconst store = create<Store>((set) => ({\n  transitionStateTo: TransitionState.SUSPENDED,\n  transitionStateFrom: TransitionState.SUSPENDED,\n  transitionConfig: null,\n  exitDone: () => {},\n  enterDone: () => {},\n  from: null,\n  to: null,\n  data: null,\n  onEnteringCount: 0,\n  onExitingCount: 0,\n  applyTransitionConfig: () =>\n    set((state) => ({\n      data: state.transitionConfig?.data,\n      transitionConfig: null,\n    })),\n  suspendedRoute: null,\n}));\n\nconst useStore = createHook<Store>(store);\n\nexport { store, useStore };\n","import { ReactNode, useLayoutEffect, createContext, useMemo } from \"react\";\n\nexport const PageContext = createContext(\"both\");\n","import { store, useStore } from \"./store\";\nimport { useLayoutEffect, useContext } from \"react\";\n\nimport { PageContext } from \"./context\";\n\ninterface usePageTransitionProps {\n  onAppear?: (state?: { data?: any }) => void;\n  onAppearing?: (state?: { data?: any; done: () => void }) => void;\n  onAppeared?: (state?: { data?: any }) => void;\n  onEnter?: (state?: { from: string | null; data?: any }) => void;\n  onEntering?: (state?: {\n    from: string | null;\n    to: string | null;\n    data?: any;\n    done: () => void;\n  }) => void;\n  onEntered?: (state?: { from: string | null; data?: any }) => void;\n  onExit?: (state?: { to: string | null; data?: any }) => void;\n  onExiting?: (state?: {\n    from: string | null;\n    to: string | null;\n    data?: any;\n    done: () => void;\n  }) => void;\n}\n\nexport function usePageTransition({\n  onAppear,\n  onAppearing,\n  onAppeared,\n  onEnter,\n  onEntering,\n  onEntered,\n  onExit,\n  onExiting,\n}: usePageTransitionProps = {}) {\n  const pageContext = useContext(PageContext);\n  const transitionStateTo = useStore((s) => s.transitionStateTo);\n  const transitionStateFrom = useStore((s) => s.transitionStateFrom);\n\n  const enterDone = useStore((s) => s.enterDone);\n  const exitDone = useStore((s) => s.exitDone);\n  const from = useStore((s) => s.from);\n  const to = useStore((s) => s.to);\n  const data = useStore((s) => s.data);\n\n  const isEnteringPage = pageContext === store.getState().to;\n  const isExitingPage = pageContext === store.getState().from;\n\n  // keep track of registered callbacks\n  useLayoutEffect(() => {\n    if (isEnteringPage && !!onEntering) {\n      store.setState({ onEnteringCount: store.getState().onEnteringCount + 1 });\n    }\n    return () => {\n      if (isEnteringPage && !!onEntering) {\n        store.setState({\n          onEnteringCount: store.getState().onEnteringCount - 1,\n        });\n      }\n    };\n  }, [isEnteringPage, onEntering]);\n\n  // keep track of registered callbacks\n  useLayoutEffect(() => {\n    if (isExitingPage && !!onExiting) {\n      store.setState({ onExitingCount: store.getState().onExitingCount + 1 });\n    }\n    return () => {\n      if (isExitingPage && !!onExiting) {\n        store.setState({\n          onExitingCount: store.getState().onExitingCount - 1,\n        });\n      }\n    };\n  }, [isExitingPage, onExiting]);\n\n  // Trigger callbacks on \"to\" page\n  useLayoutEffect(\n    function triggerEnterCallbacks() {\n      if (isEnteringPage) {\n        if (transitionStateTo === \"appear\") {\n          onAppear?.();\n        } else if (transitionStateTo === \"appearing\") {\n          onAppearing?.({ done: enterDone });\n        } else if (transitionStateTo === \"appeared\") {\n          onAppeared?.();\n        } else if (transitionStateTo === \"enter\") {\n          onEnter?.({ from: store.getState().from });\n        } else if (transitionStateTo === \"entering\") {\n          onEntering?.({\n            from: store.getState().from,\n            to: store.getState().to,\n            done: enterDone,\n            data: store.getState().data,\n          });\n        } else if (transitionStateTo === \"entered\") {\n          onEntered?.({ from: store.getState().from });\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [transitionStateTo] // only trigger on transition state change\n  );\n\n  // Trigger exirt callbacks on \"from\" page\n  useLayoutEffect(\n    function triggerExitCallbacks() {\n      if (isExitingPage) {\n        if (transitionStateFrom === \"exit\") {\n          onExit?.({ to: store.getState().to });\n        } else if (transitionStateFrom === \"exiting\") {\n          onExiting?.({\n            from: store.getState().from,\n            to: store.getState().to,\n            done: exitDone,\n            data: store.getState().data,\n          });\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [transitionStateFrom] // only trigger on transition state change\n  );\n\n  // Return state from hook\n  if (pageContext === \"both\") {\n    // hook used outside of page context\n    return {\n      transitionStateTo,\n      transitionStateFrom,\n      from,\n      to,\n      data,\n    };\n  } else {\n    // hook used inside a page context\n    return {\n      transitionState: isEnteringPage ? transitionStateTo : transitionStateFrom,\n      from,\n      to,\n      data,\n    };\n  }\n}\n","export function pathToHypen(path: string) {\n  const h = path.replace(/\\//g, \"-\");\n  return h.startsWith(\"-\") ? h.substring(1) : h;\n}\n","import { ReactNode, useRef, Suspense, useEffect } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\n\nimport { TransitionState } from \"./enums\";\nimport { PageContext } from \"./context\";\nimport { store } from \"./store\";\nimport { pathToHypen } from \"./utils\";\n\ninterface PageWrapperProps {\n  children: ReactNode;\n  pathname: string; // used as unique pathname\n  className?: string;\n  timeout?: number | { enter?: number; exit?: number; appear?: number };\n  detectAnimationEnd?: boolean;\n  detectTransitionEnd?: boolean;\n  onEnter?: () => void;\n  onEntering?: () => void;\n  onEntered?: () => void;\n  onExit?: () => void;\n  onExiting?: () => void;\n  onExited?: () => void;\n}\n\nconst Fallback = ({\n  pathname,\n  className,\n}: {\n  pathname: string;\n  className?: string;\n}) => {\n  const isFirstAppear = !store.getState().from;\n  // keep track of suspended status\n  useEffect(() => {\n    store.setState({ suspendedRoute: pathname });\n    return () => {\n      store.setState({ suspendedRoute: null });\n    };\n  }, []);\n  return (\n    <div\n      className={`${className} ${className}-${pathToHypen(\n        pathname\n      )} ${className}-${isFirstAppear ? \"appear\" : \"enter\"}-suspended`}\n    />\n  );\n};\n\nexport function PageWrapper({\n  children,\n  pathname,\n  className,\n  timeout,\n  detectAnimationEnd,\n  detectTransitionEnd,\n  ...props\n}: PageWrapperProps) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  return (\n    <Suspense fallback={<Fallback pathname={pathname} className={className} />}>\n      <CSSTransition\n        nodeRef={ref}\n        key={pathname}\n        addEndListener={(done: () => void) => {\n          if (!ref.current) return;\n\n          // are we the entering page or leaving page?\n          const isEnteringPage = pathname === store.getState().to;\n          const isExitingPage = pathname === store.getState().from;\n\n          // Attachs CSS listeners unless user has registered callbacks\n          if (\n            (isEnteringPage && store.getState().onEnteringCount === 0) ||\n            (isExitingPage && store.getState().onExitingCount === 0)\n          ) {\n            if (detectAnimationEnd) {\n              ref.current.addEventListener(\"animationend\", done, false);\n            }\n            if (detectTransitionEnd) {\n              ref.current.addEventListener(\"transitionend\", done, false);\n            }\n          }\n\n          if (isEnteringPage) {\n            store.setState({ enterDone: done });\n          } else if (isExitingPage) {\n            store.setState({ exitDone: done });\n          }\n        }}\n        timeout={timeout}\n        classNames={className}\n        appear={true}\n        unmountOnExit\n        {...props}\n        onEnter={(isAppearing) => {\n          store.setState({\n            transitionStateTo: isAppearing\n              ? TransitionState.APPEAR\n              : TransitionState.ENTER,\n          });\n          if (props.onEnter) props.onEnter();\n        }}\n        onEntering={(isAppearing) => {\n          store.setState({\n            transitionStateTo: isAppearing\n              ? TransitionState.APPEARING\n              : TransitionState.ENTERING,\n          });\n          if (props.onEntering) props.onEntering();\n        }}\n        onEntered={(isAppearing) => {\n          store.setState({\n            transitionStateTo: isAppearing\n              ? TransitionState.APPEARED\n              : TransitionState.ENTERED,\n          });\n          if (props.onEntered) props.onEntered();\n        }}\n        onExit={() => {\n          store.setState({ transitionStateFrom: TransitionState.EXIT });\n          if (props.onExit) props.onExit();\n        }}\n        onExiting={() => {\n          store.setState({ transitionStateFrom: TransitionState.EXITING });\n          if (props.onExiting) props.onExiting();\n        }}\n        onExited={() => {\n          store.setState({ transitionStateFrom: TransitionState.EXITED });\n          if (props.onExited) props.onExited();\n        }}\n      >\n        <div\n          className={`${className} ${className}-${pathToHypen(pathname)}`}\n          ref={ref}\n        >\n          <PageContext.Provider value={pathname}>\n            {children}\n          </PageContext.Provider>\n        </div>\n      </CSSTransition>\n    </Suspense>\n  );\n}\n","import { Fragment, ReactNode, useLayoutEffect, useMemo, useState } from \"react\";\nimport { SwitchTransition, TransitionGroup } from \"react-transition-group\";\n\nimport { TransitionState } from \"./enums\";\nimport { store } from \"./store\";\nimport { PageWrapper } from \"./PageWrapper\";\n\nexport type TransitionMode = \"out-in\" | \"in-out\" | \"sync\";\n\ninterface PageTransitionProps {\n  children: ReactNode;\n  pageName: string; // used as unique pathname\n  mode?: TransitionMode;\n  className?: string;\n  timeout?: number | { enter?: number; exit?: number; appear?: number };\n  detectAnimationEnd?: boolean;\n  detectTransitionEnd?: boolean;\n}\n\nexport function PageTransitions({\n  children,\n  pageName,\n  mode = \"out-in\",\n  className = \"page\",\n  timeout,\n  detectAnimationEnd = true,\n  detectTransitionEnd = true,\n}: PageTransitionProps) {\n  const pathname = pageName;\n\n  useMemo(() => {\n    // update store.to before next child render\n    store.getState().to = pathname;\n    store.getState().transitionStateTo = TransitionState.SUSPENDED;\n    store.getState().transitionStateFrom = TransitionState.SUSPENDED;\n  }, [pathname]);\n\n  // entering pathname\n  useLayoutEffect(() => {\n    // can we use setState instead of raw access in useMemo above?\n    // store.setState({\n    //   to: pathname,\n    //   transitionStateTo: \"mount\",\n    //   transitionStateFrom: \"mount\"\n    // });\n\n    // set temporary transtion data for this navigation\n    store.getState().applyTransitionConfig();\n\n    return () => {\n      // leaving pathname\n      store.setState({ from: pathname });\n    };\n  }, [pathname]);\n\n  function renderPage() {\n    return (\n      <PageWrapper\n        key={pathname}\n        pathname={pathname}\n        className={className}\n        timeout={timeout}\n        detectAnimationEnd={detectAnimationEnd}\n        detectTransitionEnd={detectTransitionEnd}\n      >\n        {children}\n      </PageWrapper>\n    );\n  }\n\n  function renderSwitchTransition(mode: \"out-in\" | \"in-out\") {\n    return <SwitchTransition mode={mode}>{renderPage()}</SwitchTransition>;\n  }\n\n  function renderSyncTransition() {\n    return (\n      <TransitionGroup component={null} appear enter exit>\n        {renderPage()}\n      </TransitionGroup>\n    );\n  }\n\n  // Workaround: reset if user navigates while page is suspended\n  const [key, setKey] = useState(0);\n  useLayoutEffect(() => {\n    const suspendedRoute = store.getState().suspendedRoute;\n    if (!!suspendedRoute && pathname !== suspendedRoute) {\n      // Force a remout of react-transition-group\n      setKey(key + 1);\n    }\n  }, [pathname, key, setKey]);\n\n  return (\n    <Fragment key={key}>\n      {mode === \"sync\" ? renderSyncTransition() : renderSwitchTransition(mode)}\n    </Fragment>\n  );\n}\n\nexport function setPageTransitionData(data: any) {\n  store.setState({ transitionConfig: { data } });\n}\n"],"names":["TransitionState","store","create","set","transitionStateTo","SUSPENDED","transitionStateFrom","transitionConfig","exitDone","enterDone","from","to","data","onEnteringCount","onExitingCount","applyTransitionConfig","state","_state$transitionConf","suspendedRoute","useStore","createHook","PageContext","createContext","usePageTransition","onAppear","onAppearing","onAppeared","onEnter","onEntering","onEntered","onExit","onExiting","pageContext","useContext","s","isEnteringPage","getState","isExitingPage","useLayoutEffect","setState","done","transitionState","pathToHypen","path","h","replace","startsWith","substring","_excluded","Fallback","pathname","className","isFirstAppear","useEffect","_jsx","children","timeout","detectAnimationEnd","detectTransitionEnd","_ref","props","_objectWithoutPropertiesLoose","ref","useRef","Suspense","fallback","CSSTransition","_extends","nodeRef","addEndListener","current","addEventListener","classNames","appear","unmountOnExit","isAppearing","APPEAR","ENTER","APPEARING","ENTERING","APPEARED","ENTERED","EXIT","EXITING","onExited","EXITED","Provider","value","PageTransitions","pageName","mode","PageWrapper","useMemo","key","setKey","useState","Fragment","TransitionGroup","component","enter","exit","renderPage","SwitchTransition","renderSwitchTransition"],"mappings":"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"}