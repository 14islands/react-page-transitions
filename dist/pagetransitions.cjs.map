{"version":3,"file":"pagetransitions.cjs","sources":["../src/enums.ts","../src/store.ts","../src/context.ts","../src/utils.ts","../src/PageWrapper.tsx","../src/PageTransitions.tsx","../src/usePageTransition.tsx"],"sourcesContent":["export const enum TransitionState {\n  SUSPENDED = \"suspended\", // waiting to mount or suspended\n  APPEAR = \"appear\",\n  APPEARING = \"appearing\",\n  APPEARED = \"appeared\",\n  EXIT = \"exit\",\n  EXITING = \"exiting\",\n  EXITED = \"exited\",\n  ENTER = \"enter\",\n  ENTERING = \"entering\",\n  ENTERED = \"entered\",\n}\n","import create from \"zustand/vanilla\";\nimport createHook from \"zustand\";\n\nimport { TransitionState } from \"./enums\";\n\nexport type TransitionConfig = {\n  from?: string;\n  to?: string;\n  data?: any;\n};\n\ntype Store = {\n  transitionStateTo: TransitionState;\n  transitionStateFrom: TransitionState;\n  transitionConfig: TransitionConfig | null;\n  exitDone: () => void;\n  enterDone: () => void;\n  from: string | null;\n  to: string | null;\n  data: any;\n  onEnteringCount: number;\n  onExitingCount: number;\n  applyTransitionConfig: () => void;\n};\n\nconst store = create<Store>((set) => ({\n  transitionStateTo: TransitionState.SUSPENDED,\n  transitionStateFrom: TransitionState.SUSPENDED,\n  transitionConfig: null,\n  exitDone: () => {},\n  enterDone: () => {},\n  from: null,\n  to: null,\n  data: null,\n  onEnteringCount: 0,\n  onExitingCount: 0,\n  applyTransitionConfig: () =>\n    set((state) => ({\n      data: state.transitionConfig?.data,\n      transitionConfig: null,\n    })),\n}));\n\nconst useStore = createHook<Store>(store);\n\nexport { store, useStore };\n","import { ReactNode, useLayoutEffect, createContext, useMemo } from \"react\";\n\nexport const PageContext = createContext(\"both\");\n","export function pathToHypen(path: string) {\n  const h = path.replace(/\\//g, \"-\");\n  return h.startsWith(\"-\") ? h.substring(1) : h;\n}\n","import { ReactNode, useRef, Suspense } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\n\nimport { TransitionState } from \"./enums\";\nimport { PageContext } from \"./context\";\nimport { store } from \"./store\";\nimport { pathToHypen } from \"./utils\";\n\ninterface PageWrapperProps {\n  children: ReactNode;\n  pathname: string; // used as unique pathname\n  className?: string;\n  timeout?: number | { enter?: number; exit?: number; appear?: number };\n  detectAnimationEnd?: boolean;\n  detectTransitionEnd?: boolean;\n  onEnter?: () => void;\n  onEntering?: () => void;\n  onEntered?: () => void;\n  onExit?: () => void;\n  onExiting?: () => void;\n  onExited?: () => void;\n}\n\nexport function PageWrapper({\n  children,\n  pathname,\n  className,\n  timeout,\n  detectAnimationEnd,\n  detectTransitionEnd,\n  ...props\n}: PageWrapperProps) {\n  const ref = useRef<HTMLDivElement>(null);\n  const isFirstAppear = !store.getState().from;\n\n  const Fallback = () => {\n    return (\n      <div\n        className={`${className} ${className}-${pathToHypen(\n          pathname\n        )} ${className}-${isFirstAppear ? \"appear\" : \"enter\"}-suspended`}\n      />\n    );\n  };\n\n  return (\n    <Suspense fallback={<Fallback />}>\n      <CSSTransition\n        nodeRef={ref}\n        key={pathname}\n        addEndListener={(done: () => void) => {\n          if (!ref.current) return;\n\n          // are we the entering page or leaving page?\n          const isEnteringPage = pathname === store.getState().to;\n          const isExitingPage = pathname === store.getState().from;\n\n          // Attachs CSS listeners unless user has registered callbacks\n          if (\n            (isEnteringPage && store.getState().onEnteringCount === 0) ||\n            (isExitingPage && store.getState().onExitingCount === 0)\n          ) {\n            if (detectAnimationEnd) {\n              ref.current.addEventListener(\"animationend\", done, false);\n            }\n            if (detectTransitionEnd) {\n              ref.current.addEventListener(\"transitionend\", done, false);\n            }\n          }\n\n          if (isEnteringPage) {\n            store.setState({ enterDone: done });\n          } else if (isExitingPage) {\n            store.setState({ exitDone: done });\n          }\n        }}\n        timeout={timeout}\n        classNames={className}\n        appear={true}\n        unmountOnExit\n        {...props}\n        onEnter={(isAppearing) => {\n          store.setState({\n            transitionStateTo: isAppearing\n              ? TransitionState.APPEAR\n              : TransitionState.ENTER,\n          });\n          if (props.onEnter) props.onEnter();\n        }}\n        onEntering={(isAppearing) => {\n          store.setState({\n            transitionStateTo: isAppearing\n              ? TransitionState.APPEARING\n              : TransitionState.ENTERING,\n          });\n          if (props.onEntering) props.onEntering();\n        }}\n        onEntered={(isAppearing) => {\n          store.setState({\n            transitionStateTo: isAppearing\n              ? TransitionState.APPEARED\n              : TransitionState.ENTERED,\n          });\n          if (props.onEntered) props.onEntered();\n        }}\n        onExit={() => {\n          store.setState({ transitionStateFrom: TransitionState.EXIT });\n          if (props.onExit) props.onExit();\n        }}\n        onExiting={() => {\n          store.setState({ transitionStateFrom: TransitionState.EXITING });\n          if (props.onExiting) props.onExiting();\n        }}\n        onExited={() => {\n          store.setState({ transitionStateFrom: TransitionState.EXITED });\n          if (props.onExited) props.onExited();\n        }}\n      >\n        <div\n          className={`${className} ${className}-${pathToHypen(pathname)}`}\n          ref={ref}\n        >\n          <PageContext.Provider value={pathname}>\n            {children}\n          </PageContext.Provider>\n        </div>\n      </CSSTransition>\n    </Suspense>\n  );\n}\n","import { ReactNode, useLayoutEffect, useMemo } from \"react\";\nimport { SwitchTransition, TransitionGroup } from \"react-transition-group\";\n\nimport { TransitionState } from \"./enums\";\nimport { store } from \"./store\";\nimport { PageWrapper } from \"./PageWrapper\";\n\nexport type TransitionMode = \"out-in\" | \"in-out\" | \"sync\";\n\ninterface PageTransitionProps {\n  children: ReactNode;\n  pageName: string; // used as unique pathname\n  mode?: TransitionMode;\n  className?: string;\n  timeout?: number | { enter?: number; exit?: number; appear?: number };\n  detectAnimationEnd?: boolean;\n  detectTransitionEnd?: boolean;\n}\n\nexport function PageTransitions({\n  children,\n  pageName,\n  mode = \"out-in\",\n  className = \"page\",\n  timeout,\n  detectAnimationEnd = true,\n  detectTransitionEnd = true,\n}: PageTransitionProps) {\n  const pathname = pageName;\n\n  useMemo(() => {\n    // update store.to before next child render\n    store.getState().to = pathname;\n    store.getState().transitionStateTo = TransitionState.SUSPENDED;\n    store.getState().transitionStateFrom = TransitionState.SUSPENDED;\n  }, [pathname]);\n\n  // entering pathname\n  useLayoutEffect(() => {\n    // can we use setState instead of raw access in useMemo above?\n    // store.setState({\n    //   to: pathname,\n    //   transitionStateTo: \"mount\",\n    //   transitionStateFrom: \"mount\"\n    // });\n\n    // set temporary transtion data for this navigation\n    store.getState().applyTransitionConfig();\n\n    return () => {\n      // leaving pathname\n      store.setState({ from: pathname });\n    };\n  }, [pathname]);\n\n  function renderPage() {\n    return (\n      <PageWrapper\n        key={pathname}\n        pathname={pathname}\n        className={className}\n        timeout={timeout}\n        detectAnimationEnd={detectAnimationEnd}\n        detectTransitionEnd={detectTransitionEnd}\n      >\n        {children}\n      </PageWrapper>\n    );\n  }\n\n  function renderSwitchTransition(mode: \"out-in\" | \"in-out\") {\n    return <SwitchTransition mode={mode}>{renderPage()}</SwitchTransition>;\n  }\n\n  function renderSyncTransition() {\n    return (\n      <TransitionGroup component={null} appear enter exit>\n        {renderPage()}\n      </TransitionGroup>\n    );\n  }\n\n  return (\n    <>\n      {mode === \"sync\" ? renderSyncTransition() : renderSwitchTransition(mode)}\n    </>\n  );\n}\n\nexport function setPageTransitionData(data: any) {\n  store.setState({ transitionConfig: { data } });\n}\n","import { store, useStore } from \"./store\";\nimport { useLayoutEffect, useContext } from \"react\";\n\nimport { PageContext } from \"./context\";\n\ninterface usePageTransitionProps {\n  onAppear?: (state?: { data?: any }) => void;\n  onAppearing?: (state?: { data?: any; done: () => void }) => void;\n  onAppeared?: (state?: { data?: any }) => void;\n  onEnter?: (state?: { from: string | null; data?: any }) => void;\n  onEntering?: (state?: {\n    from: string | null;\n    to: string | null;\n    data?: any;\n    done: () => void;\n  }) => void;\n  onEntered?: (state?: { from: string | null; data?: any }) => void;\n  onExit?: (state?: { to: string | null; data?: any }) => void;\n  onExiting?: (state?: {\n    from: string | null;\n    to: string | null;\n    data?: any;\n    done: () => void;\n  }) => void;\n}\n\nexport function usePageTransition({\n  onAppear,\n  onAppearing,\n  onAppeared,\n  onEnter,\n  onEntering,\n  onEntered,\n  onExit,\n  onExiting,\n}: usePageTransitionProps = {}) {\n  const pageContext = useContext(PageContext);\n  const transitionStateTo = useStore((s) => s.transitionStateTo);\n  const transitionStateFrom = useStore((s) => s.transitionStateFrom);\n\n  const enterDone = useStore((s) => s.enterDone);\n  const exitDone = useStore((s) => s.exitDone);\n  const from = useStore((s) => s.from);\n  const to = useStore((s) => s.to);\n  const data = useStore((s) => s.data);\n\n  const isEnteringPage = pageContext === store.getState().to;\n  const isExitingPage = pageContext === store.getState().from;\n\n  // keep track of registered callbacks\n  useLayoutEffect(() => {\n    if (isEnteringPage && !!onEntering) {\n      store.setState({ onEnteringCount: store.getState().onEnteringCount + 1 });\n    }\n    return () => {\n      if (isEnteringPage && !!onEntering) {\n        store.setState({\n          onEnteringCount: store.getState().onEnteringCount - 1,\n        });\n      }\n    };\n  }, [isEnteringPage, onEntering]);\n\n  // keep track of registered callbacks\n  useLayoutEffect(() => {\n    if (isExitingPage && !!onExiting) {\n      store.setState({ onExitingCount: store.getState().onExitingCount + 1 });\n    }\n    return () => {\n      if (isExitingPage && !!onExiting) {\n        store.setState({\n          onExitingCount: store.getState().onExitingCount - 1,\n        });\n      }\n    };\n  }, [isExitingPage, onExiting]);\n\n  // Trigger callbacks on \"to\" page\n  useLayoutEffect(\n    function triggerEnterCallbacks() {\n      if (isEnteringPage) {\n        if (transitionStateTo === \"appear\") {\n          onAppear?.();\n        } else if (transitionStateTo === \"appearing\") {\n          onAppearing?.({ done: enterDone });\n        } else if (transitionStateTo === \"appeared\") {\n          onAppeared?.();\n        } else if (transitionStateTo === \"enter\") {\n          onEnter?.({ from: store.getState().from });\n        } else if (transitionStateTo === \"entering\") {\n          onEntering?.({\n            from: store.getState().from,\n            to: store.getState().to,\n            done: enterDone,\n            data: store.getState().data,\n          });\n        } else if (transitionStateTo === \"entered\") {\n          onEntered?.({ from: store.getState().from });\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [transitionStateTo] // only trigger on transition state change\n  );\n\n  // Trigger exirt callbacks on \"from\" page\n  useLayoutEffect(\n    function triggerExitCallbacks() {\n      if (isExitingPage) {\n        if (transitionStateFrom === \"exit\") {\n          onExit?.({ to: store.getState().to });\n        } else if (transitionStateFrom === \"exiting\") {\n          onExiting?.({\n            from: store.getState().from,\n            to: store.getState().to,\n            done: exitDone,\n            data: store.getState().data,\n          });\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [transitionStateFrom] // only trigger on transition state change\n  );\n\n  // Return state from hook\n  if (pageContext === \"both\") {\n    // hook used outside of page context\n    return {\n      transitionStateTo,\n      transitionStateFrom,\n      from,\n      to,\n      data,\n    };\n  } else {\n    // hook used inside a page context\n    return {\n      transitionState: isEnteringPage ? transitionStateTo : transitionStateFrom,\n      from,\n      to,\n      data,\n    };\n  }\n}\n"],"names":["TransitionState","store","create","set","transitionStateTo","SUSPENDED","transitionStateFrom","transitionConfig","exitDone","enterDone","from","to","data","onEnteringCount","onExitingCount","applyTransitionConfig","state","_state$transitionConf","useStore","createHook","PageContext","createContext","pathToHypen","path","h","replace","startsWith","substring","PageWrapper","_ref","children","pathname","className","timeout","detectAnimationEnd","detectTransitionEnd","props","_objectWithoutPropertiesLoose","_excluded","ref","useRef","isFirstAppear","getState","_jsx","jsx","Suspense","fallback","CSSTransition","_extends","nodeRef","addEndListener","done","current","isEnteringPage","isExitingPage","addEventListener","setState","classNames","appear","unmountOnExit","onEnter","isAppearing","APPEAR","ENTER","onEntering","APPEARING","ENTERING","onEntered","APPEARED","ENTERED","onExit","EXIT","onExiting","EXITING","onExited","EXITED","Provider","value","PageTransitions","_ref$mode","mode","_ref$className","_ref$detectAnimationE","_ref$detectTransition","pageName","renderPage","useMemo","useLayoutEffect","_Fragment","TransitionGroup","component","enter","exit","SwitchTransition","renderSwitchTransition","setPageTransitionData","usePageTransition","_temp","onAppear","onAppearing","onAppeared","pageContext","useContext","s","transitionState"],"mappings":"wNAAkBA,0CAAlBA,QAAAA,qBAAAA,GAAkBA,EAAAA,QAAeA,kBAAfA,wBAWjB,KAVC,UAAA,YACAA,EAAA,OAAA,SACAA,EAAA,UAAA,YACAA,EAAA,SAAA,WACAA,EAAA,KAAA,OACAA,EAAA,QAAA,UACAA,EAAA,OAAA,SACAA,EAAA,MAAA,QACAA,EAAA,SAAA,WACAA,EAAA,QAAA,UCeF,IAAWC,EAAGC,EAAAA,QAAc,SAACC,GAAD,MAAU,CACpCC,kBAAmBJ,wBAAgBK,UACnCC,oBAAqBN,QAAAA,gBAAgBK,UACrCE,iBAAkB,KAClBC,SAAU,aACVC,UAAW,aACXC,KAAM,KACNC,GAAI,KACJC,KAAM,KACNC,gBAAiB,EACjBC,eAAgB,EAChBC,sBAAuB,WAAA,OAClBZ,EAAC,SAACa,GAAW,IAAAC,EAAA,MAAA,CACdL,KAAM,OAAFK,EAAED,EAAMT,uBAAN,EAAAU,EAAwBL,KAC9BL,iBAAkB,YAIVW,EAAGC,EAAAA,QAAkBlB,GCzCtBmB,eAAcC,EAAaA,cAAC,4OCFzBC,SAAAA,EAAYC,GAC1B,IAAOC,EAAGD,EAAKE,QAAQ,MAAO,KAC9B,OAAOD,EAAEE,WAAW,KAAOF,EAAEG,UAAU,GAAKH,iGCqB9BI,SAAAA,EAQGC,GAAA,IAAAC,EAAAD,EAPjBC,SACAC,EAMiBF,EANjBE,SACAC,EAKiBH,EALjBG,UACAC,EAIiBJ,EAJjBI,QACAC,EAGiBL,EAHjBK,mBACAC,EAEiBN,EAFjBM,oBACGC,oIAEHC,CAAAR,EAAAS,GAASC,EAAGC,EAAMA,OAAiB,MAChBC,GAAIxC,EAAMyC,WAAWhC,kBAYxC,OACEiC,EAACC,IAAAC,EAADA,SAAU,CAAAC,sBAAUH,EAAAC,IAXL,wBACf,OACED,EAAAA,IAAA,MAAA,CACEX,UAAcA,EAAaA,IAAAA,EAAaV,IAAAA,EACtCS,GADO,IAEJC,EAFI,KAESS,EAAgB,SAAW,SAFpC,gBAQO,0BAClBE,EAAAA,IAACI,EAAAA,cACCC,EAAA,CAAAC,QAASV,EAETW,eAAgB,SAACC,GACf,GAAKZ,EAAIa,QAAT,CAGA,IAAoBC,EAAGtB,IAAa9B,EAAMyC,WAAW/B,GAClC2C,EAAGvB,IAAa9B,EAAMyC,WAAWhC,MAIjD2C,GAAuD,IAArCpD,EAAMyC,WAAW7B,iBACnCyC,GAAqD,IAApCrD,EAAMyC,WAAW5B,kBAE/BoB,GACFK,EAAIa,QAAQG,iBAAiB,eAAgBJ,GAAM,GAEjDhB,GACFI,EAAIa,QAAQG,iBAAiB,gBAAiBJ,GAAM,IAIpDE,EACFpD,EAAMuD,SAAS,CAAE/C,UAAW0C,IACnBG,GACTrD,EAAMuD,SAAS,CAAEhD,SAAU2C,MAG/BlB,QAASA,EACTwB,WAAYzB,EACZ0B,QAAQ,EACRC,eAAa,GACTvB,EACJ,CAAAwB,QAAS,SAACC,GACR5D,EAAMuD,SAAS,CACbpD,kBAAmByD,EACf7D,QAAAA,gBAAgB8D,OAChB9D,QAAAA,gBAAgB+D,QAElB3B,EAAMwB,SAASxB,EAAMwB,WAE3BI,WAAY,SAACH,GACX5D,EAAMuD,SAAS,CACbpD,kBAAmByD,EACf7D,QAAAA,gBAAgBiE,UAChBjE,QAAeA,gBAACkE,WAElB9B,EAAM4B,YAAY5B,EAAM4B,cAE9BG,UAAW,SAACN,GACV5D,EAAMuD,SAAS,CACbpD,kBAAmByD,EACf7D,QAAAA,gBAAgBoE,SAChBpE,QAAeA,gBAACqE,UAElBjC,EAAM+B,WAAW/B,EAAM+B,aAE7BG,OAAQ,WACNrE,EAAMuD,SAAS,CAAElD,oBAAqBN,QAAeA,gBAACuE,OAClDnC,EAAMkC,QAAQlC,EAAMkC,UAE1BE,UAAW,WACTvE,EAAMuD,SAAS,CAAElD,oBAAqBN,QAAeA,gBAACyE,UAClDrC,EAAMoC,WAAWpC,EAAMoC,aAE7BE,SAAU,WACRzE,EAAMuD,SAAS,CAAElD,oBAAqBN,QAAAA,gBAAgB2E,SAClDvC,EAAMsC,UAAUtC,EAAMsC,YApE9B5C,sBAuEEa,EACEC,IAAA,MAAA,CAAAZ,UAAcA,EAAL,IAAkBA,EAAlB,IAA+BV,EAAYS,GACpDQ,IAAKA,EAELT,sBAAAa,EAAAA,IAACvB,EAAYwD,SAAb,CAAsBC,MAAO9C,EAA7BD,SACGA,QA1EAC,6BC9BG+C,SAQMjD,GAAA,IAAAC,EAAAD,EAPpBC,SAOoBiD,EAAAlD,EALpBmD,KAAAA,OAKoB,IAAAD,EALb,SAKaA,EAAAE,EAAApD,EAJpBG,UAAAA,OAIoB,IAAAiD,EAJR,OAIQA,EAHpBhD,EAGoBJ,EAHpBI,QAGoBiD,EAAArD,EAFpBK,mBAAAA,OAEoB,IAAAgD,GAAAA,EAAAC,EAAAtD,EADpBM,oBAAAA,OACoB,IAAAgD,GAAAA,EACdpD,EADcF,EANpBuD,SAkCA,SAAAC,iBACE,OACE1C,EAACC,IAAAhB,EAEC,CAAAG,SAAUA,EACVC,UAAWA,EACXC,QAASA,EACTC,mBAAoBA,EACpBC,oBAAqBA,EAEpBL,SAAAA,GAPIC,GAwBX,OApDAuD,EAAOA,QAAC,WAENrF,EAAMyC,WAAW/B,GAAKoB,EACtB9B,EAAMyC,WAAWtC,kBAAoBJ,QAAAA,gBAAgBK,UACrDJ,EAAMyC,WAAWpC,oBAAsBN,QAAeA,gBAACK,WACtD,CAAC0B,IAGJwD,EAAeA,gBAAC,WAWd,OAFAtF,EAAMyC,WAAW3B,mCAIfd,EAAMuD,SAAS,CAAE9C,KAAMqB,MAExB,CAACA,iBA8BFY,MAAA6C,EAAAA,SAAA,CAAA1D,SACY,SAATkD,eARDrC,EAACC,IAAA6C,EAADA,gBAAiB,CAAAC,UAAW,KAAMhC,QAAlC,EAAyCiC,OAAK,EAACC,MAA/C,EAAA9D,SACGuD,MAPP,SAAgCL,gBAC9B,OAAOrC,EAAAA,IAACkD,EAADA,iBAAA,CAAkBb,KAAMA,EAAOK,SAAAA,MAaQS,CAAuBd,oCAKzDe,SAAsBnF,GACpCX,EAAMuD,SAAS,CAAEjD,iBAAkB,CAAEK,KAAAA,gCChEvBoF,SAScC,GAAA,IAAApE,OAAA,IAAAoE,EAAF,GAR1BC,EAAAA,EAAAA,EAAAA,SACAC,EAO4BtE,EAP5BsE,YACAC,EAAAA,EAAAA,WACAxC,EAAAA,EAAAA,QACAI,IAAAA,WACAG,EAG4BtC,EAH5BsC,UACAG,EAAAA,EAAAA,OACAE,EAC4B3C,EAD5B2C,UAEM6B,EAAcC,aAAWlF,KACLF,EAAS,SAACqF,GAAMA,OAAAA,EAAEnG,sBAChBc,EAAS,SAACqF,GAAMA,OAAAA,EAAEjG,sBAExCG,EAAYS,EAAS,SAACqF,GAAMA,OAAAA,EAAE9F,YAC9BD,EAAWU,EAAS,SAACqF,GAAMA,OAAAA,EAAE/F,WAC7BE,EAAOQ,EAAS,SAACqF,UAAOA,EAAC7F,OACzBC,EAAKO,EAAS,SAACqF,UAAOA,EAAC5F,KACnBC,EAAGM,EAAS,SAACqF,UAAOA,EAAC3F,OAEXyC,EAAGgD,IAAgBpG,EAAMyC,WAAW/B,KAClC0F,IAAgBpG,EAAMyC,WAAWhC,KA+EvD,OA5EA6E,EAAeA,gBAAC,WAId,OAHIlC,GAAoBW,GACtB/D,EAAMuD,SAAS,CAAE3C,gBAAiBZ,EAAMyC,WAAW7B,gBAAkB,IAEhE,WACDwC,GAAoBW,GACtB/D,EAAMuD,SAAS,CACb3C,gBAAiBZ,EAAMyC,WAAW7B,gBAAkB,MAIzD,CAACwC,EAAgBW,IAGpBuB,EAAeA,gBAAC,WAId,OAHIjC,GAAmBkB,GACrBvE,EAAMuD,SAAS,CAAE1C,eAAgBb,EAAMyC,WAAW5B,eAAiB,IAE9D,WACDwC,GAAmBkB,GACrBvE,EAAMuD,SAAS,CACb1C,eAAgBb,EAAMyC,WAAW5B,eAAiB,MAIvD,CAACwC,EAAekB,IAGnBe,EAAeA,gBACb,WACMlC,IACwB,WAAtBjD,EACF,MAAA8F,GAAAA,IAC+B,cAAtB9F,EACE,MAAX+F,GAAAA,EAAc,CAAEhD,KAAM1C,IACS,aAAtBL,EACC,MAAVgG,GAAAA,IAC+B,UAAtBhG,EACT,MAAAwD,GAAAA,EAAU,CAAElD,KAAMT,EAAMyC,WAAWhC,OACJ,aAAtBN,QACT4D,GAAAA,EAAa,CACXtD,KAAMT,EAAMyC,WAAWhC,KACvBC,GAAIV,EAAMyC,WAAW/B,GACrBwC,KAAM1C,EACNG,KAAMX,EAAMyC,WAAW9B,OAEM,YAAtBR,UACT+D,GAAAA,EAAY,CAAEzD,KAAMT,EAAMyC,WAAWhC,UAK3C,CAACN,IAIHmF,EAAAA,gBACE,WACMjC,IAC0B,SAAxBhD,EACI,MAANgE,GAAAA,EAAS,CAAE3D,GAAIV,EAAMyC,WAAW/B,KACC,YAAxBL,IACT,MAAAkE,GAAAA,EAAY,CACV9D,KAAMT,EAAMyC,WAAWhC,KACvBC,GAAIV,EAAMyC,WAAW/B,GACrBwC,KAAM3C,EACNI,KAAMX,EAAMyC,WAAW9B,UAM/B,CAACN,IAIiB,SAAhB+F,EAEK,CACLjG,kBAAAA,EACAE,oBAAAA,EACAI,KAAAA,EACAC,GAAAA,EACAC,KAAAA,GAIK,CACL4F,gBAAiBnD,EAAiBjD,EAAoBE,EACtDI,KAAAA,EACAC,GAAAA,EACAC,KAAAA"}