{"version":3,"file":"pagetransitions.cjs","sources":["../src/enums.ts","../src/store.ts","../src/context.ts","../src/utils.ts","../src/PageWrapper.tsx","../src/PageTransitions.tsx","../src/usePageTransition.tsx"],"sourcesContent":["export const enum TransitionState {\n  SUSPENDED = \"suspended\", // waiting to mount or suspended\n  APPEAR = \"appear\",\n  APPEARING = \"appearing\",\n  APPEARED = \"appeared\",\n  EXIT = \"exit\",\n  EXITING = \"exiting\",\n  EXITED = \"exited\",\n  ENTER = \"enter\",\n  ENTERING = \"entering\",\n  ENTERED = \"entered\",\n}\n","import create from \"zustand/vanilla\";\nimport createHook from \"zustand\";\n\nimport { TransitionState } from \"./enums\";\n\nexport type TransitionConfig = {\n  from?: string;\n  to?: string;\n  data?: any;\n};\n\ntype Store = {\n  transitionStateTo: TransitionState;\n  transitionStateFrom: TransitionState;\n  transitionConfig: TransitionConfig | null;\n  exitDone: () => void;\n  enterDone: () => void;\n  from: string | null;\n  to: string | null;\n  data: any;\n  onEnteringCount: number;\n  onExitingCount: number;\n  applyTransitionConfig: () => void;\n  suspendedRoute: string | null;\n};\n\nconst store = create<Store>((set) => ({\n  transitionStateTo: TransitionState.SUSPENDED,\n  transitionStateFrom: TransitionState.SUSPENDED,\n  transitionConfig: null,\n  exitDone: () => {},\n  enterDone: () => {},\n  from: null,\n  to: null,\n  data: null,\n  onEnteringCount: 0,\n  onExitingCount: 0,\n  applyTransitionConfig: () =>\n    set((state) => ({\n      data: state.transitionConfig?.data,\n      transitionConfig: null,\n    })),\n  suspendedRoute: null,\n}));\n\nconst useStore = createHook<Store>(store);\n\nexport { store, useStore };\n","import { ReactNode, useLayoutEffect, createContext, useMemo } from \"react\";\n\nexport const PageContext = createContext(\"both\");\n","export function pathToHypen(path: string) {\n  const h = path.replace(/\\//g, \"-\");\n  return h.startsWith(\"-\") ? h.substring(1) : h;\n}\n","import { ReactNode, useRef, Suspense, useEffect } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\n\nimport { TransitionState } from \"./enums\";\nimport { PageContext } from \"./context\";\nimport { store } from \"./store\";\nimport { pathToHypen } from \"./utils\";\n\ninterface PageWrapperProps {\n  children: ReactNode;\n  pathname: string; // used as unique pathname\n  className?: string;\n  timeout?: number | { enter?: number; exit?: number; appear?: number };\n  detectAnimationEnd?: boolean;\n  detectTransitionEnd?: boolean;\n  onEnter?: () => void;\n  onEntering?: () => void;\n  onEntered?: () => void;\n  onExit?: () => void;\n  onExiting?: () => void;\n  onExited?: () => void;\n}\n\nconst Fallback = ({\n  pathname,\n  className,\n}: {\n  pathname: string;\n  className?: string;\n}) => {\n  const isFirstAppear = !store.getState().from;\n  // keep track of suspended status\n  useEffect(() => {\n    store.setState({ suspendedRoute: pathname });\n    return () => {\n      store.setState({ suspendedRoute: null });\n    };\n  }, []);\n  return (\n    <div\n      className={`${className} ${className}-${pathToHypen(\n        pathname\n      )} ${className}-${isFirstAppear ? \"appear\" : \"enter\"}-suspended`}\n    />\n  );\n};\n\nexport function PageWrapper({\n  children,\n  pathname,\n  className,\n  timeout,\n  detectAnimationEnd,\n  detectTransitionEnd,\n  ...props\n}: PageWrapperProps) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  return (\n    <Suspense fallback={<Fallback pathname={pathname} className={className} />}>\n      <CSSTransition\n        nodeRef={ref}\n        key={pathname}\n        addEndListener={(done: () => void) => {\n          if (!ref.current) return;\n\n          // are we the entering page or leaving page?\n          const isEnteringPage = pathname === store.getState().to;\n          const isExitingPage = pathname === store.getState().from;\n\n          // Attachs CSS listeners unless user has registered callbacks\n          if (\n            (isEnteringPage && store.getState().onEnteringCount === 0) ||\n            (isExitingPage && store.getState().onExitingCount === 0)\n          ) {\n            if (detectAnimationEnd) {\n              ref.current.addEventListener(\"animationend\", done, false);\n            }\n            if (detectTransitionEnd) {\n              ref.current.addEventListener(\"transitionend\", done, false);\n            }\n          }\n\n          if (isEnteringPage) {\n            store.setState({ enterDone: done });\n          } else if (isExitingPage) {\n            store.setState({ exitDone: done });\n          }\n        }}\n        timeout={timeout}\n        classNames={className}\n        appear={true}\n        unmountOnExit\n        {...props}\n        onEnter={(isAppearing) => {\n          store.setState({\n            transitionStateTo: isAppearing\n              ? TransitionState.APPEAR\n              : TransitionState.ENTER,\n          });\n          if (props.onEnter) props.onEnter();\n        }}\n        onEntering={(isAppearing) => {\n          store.setState({\n            transitionStateTo: isAppearing\n              ? TransitionState.APPEARING\n              : TransitionState.ENTERING,\n          });\n          if (props.onEntering) props.onEntering();\n        }}\n        onEntered={(isAppearing) => {\n          store.setState({\n            transitionStateTo: isAppearing\n              ? TransitionState.APPEARED\n              : TransitionState.ENTERED,\n          });\n          if (props.onEntered) props.onEntered();\n        }}\n        onExit={() => {\n          store.setState({ transitionStateFrom: TransitionState.EXIT });\n          if (props.onExit) props.onExit();\n        }}\n        onExiting={() => {\n          store.setState({ transitionStateFrom: TransitionState.EXITING });\n          if (props.onExiting) props.onExiting();\n        }}\n        onExited={() => {\n          store.setState({ transitionStateFrom: TransitionState.EXITED });\n          if (props.onExited) props.onExited();\n        }}\n      >\n        <div\n          className={`${className} ${className}-${pathToHypen(pathname)}`}\n          ref={ref}\n        >\n          <PageContext.Provider value={pathname}>\n            {children}\n          </PageContext.Provider>\n        </div>\n      </CSSTransition>\n    </Suspense>\n  );\n}\n","import { Fragment, ReactNode, useLayoutEffect, useMemo, useState } from \"react\";\nimport { SwitchTransition, TransitionGroup } from \"react-transition-group\";\n\nimport { TransitionState } from \"./enums\";\nimport { store } from \"./store\";\nimport { PageWrapper } from \"./PageWrapper\";\n\nexport type TransitionMode = \"out-in\" | \"in-out\" | \"sync\";\n\ninterface PageTransitionProps {\n  children: ReactNode;\n  pageName: string; // used as unique pathname\n  mode?: TransitionMode;\n  className?: string;\n  timeout?: number | { enter?: number; exit?: number; appear?: number };\n  detectAnimationEnd?: boolean;\n  detectTransitionEnd?: boolean;\n}\n\nexport function PageTransitions({\n  children,\n  pageName,\n  mode = \"out-in\",\n  className = \"page\",\n  timeout,\n  detectAnimationEnd = true,\n  detectTransitionEnd = true,\n}: PageTransitionProps) {\n  const pathname = pageName;\n\n  useMemo(() => {\n    // update store.to before next child render\n    store.getState().to = pathname;\n    store.getState().transitionStateTo = TransitionState.SUSPENDED;\n    store.getState().transitionStateFrom = TransitionState.SUSPENDED;\n  }, [pathname]);\n\n  // entering pathname\n  useLayoutEffect(() => {\n    // can we use setState instead of raw access in useMemo above?\n    // store.setState({\n    //   to: pathname,\n    //   transitionStateTo: \"mount\",\n    //   transitionStateFrom: \"mount\"\n    // });\n\n    // set temporary transtion data for this navigation\n    store.getState().applyTransitionConfig();\n\n    return () => {\n      // leaving pathname\n      store.setState({ from: pathname });\n    };\n  }, [pathname]);\n\n  function renderPage() {\n    return (\n      <PageWrapper\n        key={pathname}\n        pathname={pathname}\n        className={className}\n        timeout={timeout}\n        detectAnimationEnd={detectAnimationEnd}\n        detectTransitionEnd={detectTransitionEnd}\n      >\n        {children}\n      </PageWrapper>\n    );\n  }\n\n  function renderSwitchTransition(mode: \"out-in\" | \"in-out\") {\n    return <SwitchTransition mode={mode}>{renderPage()}</SwitchTransition>;\n  }\n\n  function renderSyncTransition() {\n    return (\n      <TransitionGroup component={null} appear enter exit>\n        {renderPage()}\n      </TransitionGroup>\n    );\n  }\n\n  // Workaround: reset if user navigates while page is suspended\n  const [key, setKey] = useState(0);\n  useLayoutEffect(() => {\n    const suspendedRoute = store.getState().suspendedRoute;\n    if (!!suspendedRoute && pathname !== suspendedRoute) {\n      // Force a remout of react-transition-group\n      setKey(key + 1);\n    }\n  }, [pathname, key, setKey]);\n\n  return (\n    <Fragment key={key}>\n      {mode === \"sync\" ? renderSyncTransition() : renderSwitchTransition(mode)}\n    </Fragment>\n  );\n}\n\nexport function setPageTransitionData(data: any) {\n  store.setState({ transitionConfig: { data } });\n}\n","import { store, useStore } from \"./store\";\nimport { useLayoutEffect, useContext } from \"react\";\n\nimport { PageContext } from \"./context\";\n\ninterface usePageTransitionProps {\n  onAppear?: (state?: { data?: any }) => void;\n  onAppearing?: (state?: { data?: any; done: () => void }) => void;\n  onAppeared?: (state?: { data?: any }) => void;\n  onEnter?: (state?: { from: string | null; data?: any }) => void;\n  onEntering?: (state?: {\n    from: string | null;\n    to: string | null;\n    data?: any;\n    done: () => void;\n  }) => void;\n  onEntered?: (state?: { from: string | null; data?: any }) => void;\n  onExit?: (state?: { to: string | null; data?: any }) => void;\n  onExiting?: (state?: {\n    from: string | null;\n    to: string | null;\n    data?: any;\n    done: () => void;\n  }) => void;\n}\n\nexport function usePageTransition({\n  onAppear,\n  onAppearing,\n  onAppeared,\n  onEnter,\n  onEntering,\n  onEntered,\n  onExit,\n  onExiting,\n}: usePageTransitionProps = {}) {\n  const pageContext = useContext(PageContext);\n  const transitionStateTo = useStore((s) => s.transitionStateTo);\n  const transitionStateFrom = useStore((s) => s.transitionStateFrom);\n\n  const enterDone = useStore((s) => s.enterDone);\n  const exitDone = useStore((s) => s.exitDone);\n  const from = useStore((s) => s.from);\n  const to = useStore((s) => s.to);\n  const data = useStore((s) => s.data);\n\n  const isEnteringPage = pageContext === store.getState().to;\n  const isExitingPage = pageContext === store.getState().from;\n\n  // keep track of registered callbacks\n  useLayoutEffect(() => {\n    if (isEnteringPage && !!onEntering) {\n      store.setState({ onEnteringCount: store.getState().onEnteringCount + 1 });\n    }\n    return () => {\n      if (isEnteringPage && !!onEntering) {\n        store.setState({\n          onEnteringCount: store.getState().onEnteringCount - 1,\n        });\n      }\n    };\n  }, [isEnteringPage, onEntering]);\n\n  // keep track of registered callbacks\n  useLayoutEffect(() => {\n    if (isExitingPage && !!onExiting) {\n      store.setState({ onExitingCount: store.getState().onExitingCount + 1 });\n    }\n    return () => {\n      if (isExitingPage && !!onExiting) {\n        store.setState({\n          onExitingCount: store.getState().onExitingCount - 1,\n        });\n      }\n    };\n  }, [isExitingPage, onExiting]);\n\n  // Trigger callbacks on \"to\" page\n  useLayoutEffect(\n    function triggerEnterCallbacks() {\n      if (isEnteringPage) {\n        if (transitionStateTo === \"appear\") {\n          onAppear?.();\n        } else if (transitionStateTo === \"appearing\") {\n          onAppearing?.({ done: enterDone });\n        } else if (transitionStateTo === \"appeared\") {\n          onAppeared?.();\n        } else if (transitionStateTo === \"enter\") {\n          onEnter?.({ from: store.getState().from });\n        } else if (transitionStateTo === \"entering\") {\n          onEntering?.({\n            from: store.getState().from,\n            to: store.getState().to,\n            done: enterDone,\n            data: store.getState().data,\n          });\n        } else if (transitionStateTo === \"entered\") {\n          onEntered?.({ from: store.getState().from });\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [transitionStateTo] // only trigger on transition state change\n  );\n\n  // Trigger exirt callbacks on \"from\" page\n  useLayoutEffect(\n    function triggerExitCallbacks() {\n      if (isExitingPage) {\n        if (transitionStateFrom === \"exit\") {\n          onExit?.({ to: store.getState().to });\n        } else if (transitionStateFrom === \"exiting\") {\n          onExiting?.({\n            from: store.getState().from,\n            to: store.getState().to,\n            done: exitDone,\n            data: store.getState().data,\n          });\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [transitionStateFrom] // only trigger on transition state change\n  );\n\n  // Return state from hook\n  if (pageContext === \"both\") {\n    // hook used outside of page context\n    return {\n      transitionStateTo,\n      transitionStateFrom,\n      from,\n      to,\n      data,\n    };\n  } else {\n    // hook used inside a page context\n    return {\n      transitionState: isEnteringPage ? transitionStateTo : transitionStateFrom,\n      from,\n      to,\n      data,\n    };\n  }\n}\n"],"names":["TransitionState","store","create","set","transitionStateTo","SUSPENDED","transitionStateFrom","transitionConfig","exitDone","enterDone","from","to","data","onEnteringCount","onExitingCount","applyTransitionConfig","state","_state$transitionConf","suspendedRoute","useStore","createHook","PageContext","createContext","pathToHypen","path","h","replace","startsWith","substring","_excluded","Fallback","_ref","pathname","className","isFirstAppear","getState","useEffect","setState","_jsx","children","timeout","_ref2","detectAnimationEnd","detectTransitionEnd","props","_objectWithoutPropertiesLoose","ref","useRef","Suspense","fallback","CSSTransition","_extends","nodeRef","addEndListener","done","current","isEnteringPage","isExitingPage","addEventListener","classNames","appear","unmountOnExit","onEnter","isAppearing","APPEAR","ENTER","onEntering","APPEARING","ENTERING","onEntered","APPEARED","ENTERED","onExit","EXIT","onExiting","EXITING","onExited","EXITED","jsx","Provider","value","mode","_ref$mode","_ref$className","_ref$detectAnimationE","_ref$detectTransition","pageName","PageWrapper","useMemo","useLayoutEffect","useState","key","setKey","Fragment","TransitionGroup","component","enter","exit","renderPage","SwitchTransition","renderSwitchTransition","usePageTransition","_temp","onAppear","onAppearing","onAppeared","pageContext","useContext","s","transitionState"],"mappings":"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"}